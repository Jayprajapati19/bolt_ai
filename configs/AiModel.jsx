const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
});

const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
};


const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
};

export const chatSession = model.startChat({
    generationConfig,
    history: [
    ],
});

export const GenAiCode = model.startChat({
    generationConfig: CodeGenerationConfig,
    history: [
        {
            role: "user",
            parts: [
                { text: "Generate Todo app: Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   " },
            ],
        },
        {
            role: "model",
            parts: [
                { text: "```json\n{\n  \"projectTitle\": \"Todo App\",\n  \"explanation\": \"This project is a Todo application built using React, styled with Tailwind CSS, and utilizes lucide-react for icons. It's structured into components organized in folders for better maintainability. The app allows users to add, edit, and delete todo items, marking them as complete. The app also uses date-fns to display the date of the to-do item and react-chartjs-2 for charts to show progress. No other third party library or dependencies are used. The application is fully featured for production purposes, including beautiful and fully functional UI.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport TodoList from './components/TodoList/TodoList';\\nimport './index.css';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"bg-gray-100 min-h-screen flex items-center justify-center\\\">\\n      <div className=\\\"container mx-auto p-4\\\">\\n        <h1 className=\\\"text-3xl font-bold text-center mb-8 text-gray-800\\\">üìÖ My To-Do List üöÄ</h1>\\n        <TodoList />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n    \"/components/TodoList/TodoList.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TodoItem from '../TodoItem/TodoItem';\\nimport TodoForm from '../TodoForm/TodoForm';\\nimport { Chart, Line } from 'react-chartjs-2';\\nimport { format } from 'date-fns';\\nimport { Chart as ChartJS, registerables } from 'chart.js';\\n\\nChartJS.register(...registerables);\\n\\n\\nconst TodoList = () => {\\n    const [todos, setTodos] = useState(() => {\\n      const savedTodos = localStorage.getItem('todos');\\n      if (savedTodos) {\\n        return JSON.parse(savedTodos);\\n      } else {\\n        return [];\\n      }\\n    });\\n\\n    const [showChart, setShowChart] = useState(false);\\n\\n    useEffect(() => {\\n        localStorage.setItem('todos', JSON.stringify(todos));\\n      }, [todos]);\\n\\n    const addTodo = (text) => {\\n        const newTodo = {\\n          id: Date.now(),\\n          text,\\n          completed: false,\\n          createdAt: new Date()\\n        };\\n        setTodos([...todos, newTodo]);\\n      };\\n\\n    const toggleComplete = (id) => {\\n      setTodos(todos.map(todo => todo.id === id ? {...todo, completed: !todo.completed} : todo));\\n    };\\n\\n    const deleteTodo = (id) => {\\n      setTodos(todos.filter(todo => todo.id !== id));\\n    };\\n\\n    const editTodo = (id, newText) => {\\n      setTodos(todos.map(todo => todo.id === id ? {...todo, text: newText} : todo));\\n    };\\n\\n    const completedTodos = todos.filter(todo => todo.completed).length;\\n    const totalTodos = todos.length;\\n    const progress = totalTodos === 0 ? 0 : (completedTodos / totalTodos) * 100;\\n    const remainingTodos = totalTodos - completedTodos;\\n    const todosData = todos.map(todo => ({\\n      x: format(todo.createdAt, 'MMM dd'),\\n      y: todo.completed ? 1 : 0\\n    }));\\n\\n\\n      const chartData = {\\n        labels: todosData.map(item => item.x),\\n        datasets: [\\n          {\\n            label: 'Tasks Done',\\n            data: todosData.map(item => item.y),\\n            fill: false,\\n            borderColor: 'rgb(75, 192, 192)',\\n            tension: 0.1,\\n          },\\n        ],\\n      };\\n\\n      const chartOptions = {\\n        scales: {\\n            y: {\\n                beginAtZero: true,\\n                max: 1.2,\\n                ticks: {\\n                   stepSize: 1,\\n                   callback: function(value, index, values) {\\n                        return value === 1 ? 'Done' : 'Pending'\\n                   }\\n                }\\n            }\\n        }\\n      };\\n\\n      return (\\n        <div className=\\\"bg-white shadow-md rounded-lg p-4\\\">\\n         <TodoForm addTodo={addTodo} />\\n          <ul className=\\\"mt-4 space-y-2\\\">\\n            {todos.map(todo => (\\n              <TodoItem\\n                key={todo.id}\\n                todo={todo}\\n                toggleComplete={toggleComplete}\\n                deleteTodo={deleteTodo}\\n                editTodo={editTodo}\\n              />\\n            ))}\\n          </ul>\\n            <div className=\\\"mt-6 flex justify-between items-center\\\">\\n                <div className=\\\"text-gray-700\\\">\\n                    <p>Total Tasks: {totalTodos} üìù</p>\\n                    <p>Done Tasks: {completedTodos} ‚úÖ</p>\\n                    <p>Pending Tasks: {remainingTodos} ‚è≥</p>\\n                </div>\\n                 <button onClick={()=> setShowChart(!showChart)} className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\\">Show Chart</button>\\n            </div>\\n              {showChart &&  ( <div className='mt-4'>\\n                        <Line data={chartData} options={chartOptions} />\\n              </div>\\n            )}\\n           \\n        </div>\\n      );\\n  };\\n\\nexport default TodoList;\\n\"\n    },\n    \"/components/TodoItem/TodoItem.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nconst TodoItem = ({ todo, toggleComplete, deleteTodo, editTodo }) => {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editText, setEditText] = useState(todo.text);\\n\\n  const handleEditClick = () => {\\n    setIsEditing(true);\\n  };\\n\\n  const handleSaveClick = () => {\\n    editTodo(todo.id, editText);\\n    setIsEditing(false);\\n  };\\n\\n  const handleCancelClick = () => {\\n      setEditText(todo.text)\\n     setIsEditing(false)\\n  }\\n\\n  const handleKeyDown = (e) => {\\n    if (e.key === 'Enter') {\\n      handleSaveClick();\\n    }\\n    if(e.key === 'Escape'){\\n        handleCancelClick();\\n    }\\n  }\\n\\n  return (\\n    <li className=\\\"flex items-center justify-between p-2 border-b border-gray-200\\\">\\n      {isEditing ? (\\n        <div className='flex flex-grow items-center'>\\n          <input\\n            type=\\\"text\\\"\\n            value={editText}\\n            onChange={(e) => setEditText(e.target.value)}\\n            onKeyDown={handleKeyDown}\\n            className=\\\"flex-grow px-2 py-1 border rounded mr-2 focus:outline-none focus:ring focus:border-blue-300\\\"\\n            autoFocus\\n          />\\n             <div className='flex items-center'>\\n                <button onClick={handleSaveClick}  className='mr-2 text-green-500 hover:text-green-700'> <Check /> </button>\\n                <button onClick={handleCancelClick} className='text-red-500 hover:text-red-700'> <X /> </button>\\n           </div>\\n          </div>\\n      ) : (\\n        <div className='flex items-center flex-grow'>\\n            <input\\n                type=\\\"checkbox\\\"\\n                checked={todo.completed}\\n                onChange={() => toggleComplete(todo.id)}\\n                className=\\\"mr-2 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\\\"\\n            />\\n            <span className={`${todo.completed ? 'line-through text-gray-500' : 'text-gray-700'} flex-grow`}>{todo.text}</span>\\n\\n         <span className=\\\"ml-2 text-gray-500 text-sm\\\">{format(todo.createdAt, 'MMM dd, yyyy')}</span>\\n        </div>\\n      )}\\n\\n      {!isEditing && <div className=\\\"flex items-center\\\">\\n        <button onClick={handleEditClick} className=\\\"text-blue-500 hover:text-blue-700 mr-2\\\">\\n          <Edit className='h-4 w-4'/>\\n        </button>\\n        <button onClick={() => deleteTodo(todo.id)} className=\\\"text-red-500 hover:text-red-700\\\">\\n          <Trash className='h-4 w-4'/>\\n        </button>\\n      </div>}\\n    </li>\\n  );\\n};\\n\\nexport default TodoItem;\\n\"\n    },\n    \"/components/TodoForm/TodoForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nconst TodoForm = ({ addTodo }) => {\\n  const [text, setText] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (text.trim()) {\\n      addTodo(text);\\n      setText('');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"flex\\\">\\n      <input\\n        type=\\\"text\\\"\\n        value={text}\\n        onChange={(e) => setText(e.target.value)}\\n        placeholder=\\\"Add a new todo...\\\"\\n        className=\\\"flex-grow p-2 border rounded mr-2 focus:outline-none focus:ring focus:border-blue-300\\\"\\n      />\\n      <button type=\\\"submit\\\" className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\\">\\n        <Plus className='h-4 w-4' />\\n      </button>\\n    </form>\\n  );\\n};\\n\\nexport default TodoForm;\\n\"\n    },\n    \"/index.css\": {\n     \"code\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TodoList/TodoList.js\",\n     \"/components/TodoItem/TodoItem.js\",\n     \"/components/TodoForm/TodoForm.js\",\n      \"/index.css\"\n  ]\n}\n```\n" },
            ],
        },
    ],
})

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
